<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- 指定login.jsp不提供安全拦截 -->
	<security:http pattern="/login.jsp" security="none" />
	
	<!-- 配置不过滤的资源（静态资源及登录相关） -->
	<security:http pattern="/**/*.css" security="none" />
	<security:http pattern="/**/*.js" security="none" />
	<security:http pattern="/**/*.jpg" security="none" />
	<security:http pattern="/**/*.jpeg" security="none" />
	<security:http pattern="/**/*.gif" security="none" />
	<security:http pattern="/**/*.png" security="none" />
	
	<!-- 自定义登录成功处理器 -->
	<bean id="defaultAuthenticationSuccessHandler" class="com.hunter.common.base.security.DefaultAuthenticationSuccessHandler">
		<property name="alwaysUseDefaultTargetUrl" value="true" />
		<property name="defaultTargetUrl" value="/index.jsp" />
	</bean>
	
	<!-- 自定义登录失败处理器 -->
	<bean id="defaultAuthenticationFailureHandler" class="com.hunter.common.base.security.DefaultAuthenticationFailureHandler">
		<constructor-arg name="defaultFailureUrl" value="/login.jsp" />
	</bean>
	
	<!-- 自定义用户注销成功处理器 -->
	<bean id="defaultLogoutSuccessHandler" class="com.hunter.common.base.security.DefaultLogoutSuccessHandler">
		<property name="alwaysUseDefaultTargetUrl" value="true" />
		<property name="defaultTargetUrl" value="/login.jsp" />
	</bean>
	
	<!-- access-denied-page：访问拒绝后跳转的页面 -->
	<security:http auto-config="true" >
	
		<!-- 访问失败之后的页面 -->
		<security:access-denied-handler error-page="/accessDenied.jsp"/>
		
		<!-- 配置登录页面 -->
		<security:form-login login-page="/login.jsp" login-processing-url="/login" 
			authentication-success-handler-ref="defaultAuthenticationSuccessHandler"
			authentication-failure-handler-ref="defaultAuthenticationFailureHandler"
			password-parameter="password" username-parameter="account" />
		
		<!-- 配置注销处理器 -->
		<security:logout invalidate-session="true" logout-url="/logout" 
			success-handler-ref="defaultLogoutSuccessHandler"/>
		
		<!-- 自定义安全拦截器，before="FILTER_SECURITY_INTERCEPTOR"表示在SpringSecurity默认的过滤器之前执行 -->
		<security:custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
		
	</security:http>
	
	<!-- 安全拦截器，从数据库中加载资源权限数据 -->
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="accessDecisionManager" ref="accessDecisionManager" />   
		<property name="authenticationManager" ref="authenticationManager" /> 
		<property name="securityMetadataSource" ref="securityMetadataSource" />  
	</bean>
	
	<!-- 初始化资源，获取请求资源所需要的权限 -->
	<bean id="securityMetadataSource" class="com.hunter.common.base.security.URLFilterInvocationSecurityMetadataSource"/>  
	
	<!-- 资源访问决策器 一票通过 -->
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg name="decisionVoters">
			<list>
	            <ref bean="roleVoter"/>  
	            <ref bean="authenticatedVoter"/>  
			</list>
		</constructor-arg>
	</bean>
	<!-- 修改权限的前缀只需要修改roleVoter中的rolePrefix就可以了，如果不要前缀就让它为"" -->
	<bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">  
	    <property name="rolePrefix" value=""></property>  
	</bean>
	
	<!-- authenticatedVoter是为了支持IS_AUTHENTICATED这种认证，authenticatedVoter提供的3种认证，分别是
		IS_AUTHENTICATED_ANONYMOUSLY 允许匿名用户进入
		IS_AUTHENTICATED_FULLY 允许登录用户进入
		IS_AUTHENTICATED_REMEMBERED 允许登录用户和rememberMe用户进入 -->
	<bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter" />  
	
	<!-- 认证管理器 -->
	<security:authentication-manager alias="authenticationManager">
		<!-- <security:authentication-provider>
			<security:user-service>
				<security:user name="admin" password="admin" authorities="ROLE_ADMIN"/>
				<security:user name="linyong" password="123" authorities="ADMIN"/>
				<security:user name="zhangsan" password="zhangsan" locked="true" authorities="ROLE_YK"/>
				<security:user name="lisi" password="lisi" disabled="true" authorities="ROLE_YK"/>
			</security:user-service>
		</security:authentication-provider> -->
		<!-- <security:authentication-provider user-service-ref="defaultUserDetailsService" /> -->
		<security:authentication-provider ref="authenticationProvider" />
	</security:authentication-manager>
	
	<!-- 用户service -->
	<bean id="defaultUserDetailsService" class="com.hunter.common.base.security.DefaultUserDetailsService"></bean>
	
	<!-- 用户登录验证器 -->
	<bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">  
	    <property name="hideUserNotFoundExceptions" value="false" />  
	    <property name="userDetailsService" ref="defaultUserDetailsService" />  
	    <property name="userCache" ref="userCache" />  
	    <property name="passwordEncoder" ref="passwordEncode" />  
	    <property name="saltSource" ref="saltSource" />  
	</bean>  
	  
	<!-- 配置密码加密类 -->  
	<bean id="passwordEncode" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	<bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">  
		<!-- 使用用户名称配合进行密钥加密 -->  
	    <property name="userPropertyToUse" value="account"/>  
	</bean> 
	
	<bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />
</beans>